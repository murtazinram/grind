package org.example.insaneColouredTriangles;

/**
 * https://www.codewars.com/kata/5a331ea7ee1aae8f24000175/train/java
 * Disclaimer
 * This Kata is an insane step-up from Avanta's Kata, so I recommend to solve it first before trying this one.
 * <p>
 * Problem Description
 * A coloured triangle is created from a row of colours, each of which is red, green or blue. Successive rows, each
 * containing one fewer colour than the last, are generated by considering the two touching colours in the previous row.
 * If these colours are identical, the same colour is used in the new row. If they are different, the missing colour is
 * used in the new row. This is continued until the final row, with only a single colour, is generated.
 * <p>
 * For example, different possibilities are:
 * <p>
 * Colour here:            G G        B G        R G        B R
 * Becomes colour here:     G          R          B          G
 * With a bigger example:
 * <p>
 * R R G B R G B B
 * R B R G B R B
 * G G B R G G
 * G R G B G
 * B B R R
 * B G R
 * R B
 * G
 * <p>
 * You will be given the first row of the triangle as a string and its your job to return the final colour which would
 * appear in the bottom row as a string. In the case of the example above, you would be given 'RRGBRGBB', and you should return 'G'.
 * Constraints
 * 1 <= length(row) <= 10 ** 5
 * <p>
 * The input string will only contain the uppercase letters 'B', 'G' or 'R'.
 * The exact number of test cases will be as follows:
 * 100 tests of 100 <= length(row) <= 1000
 * 100 tests of 1000 <= length(row) <= 10000
 * 100 tests of 10000 <= length(row) <= 100000
 * Examples
 * Kata.triangle("B") == 'B'
 * Kata.triangle("GB") == 'R'
 * Kata.triangle("RRR") == 'R'
 * Kata.triangle("RGBG") == 'B'
 * Kata.triangle("RBRGBRB") == 'G'
 * Kata.triangle("RBRGBRBGGRRRBGBBBGG") == 'G'
 */
public class InsaneColouredTriangles {
    public static char res = '?';
    public static char triangle(final String row) {
        computeTriangle(row.toCharArray());
        return res;
    }
    public static void computeTriangle(char[] arr) {
        if (arr.length == 1) {
            res = arr[0];
            return;
        }
        char[] nextRow = new char[arr.length - 1];
        for (int i = 0; i < nextRow.length; ++i) {
            nextRow[i] = compute(arr[i], arr[i + 1]);
        }
        computeTriangle(nextRow);
    }

    private static char compute(char i, char j) {
        char r = 'R';
        char g = 'G';
        char b = 'B';

        if (r == i && r == j) return r;
        if (g == i && g == j) return g;
        if (b == i && b == j) return b;

        if (r == i && g == j || r == j && g == i) return b;
        if (b == i && g == j || b == j && g == i) return r;
        if (b == i && r == j || b == j && r == i) return g;
        else return 'U';
    }


    public static void main(String[] args) {
        char item = triangle("RBRGBRB");
        System.out.println(item);
    }
}
